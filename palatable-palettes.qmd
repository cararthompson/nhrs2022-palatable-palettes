---
title: "Palatable Palettes: Creating and applying bespoke colour schemes"
subtitle: "Cara Thompson | NHS-R 2022 Conference | `r verbaliseR::prettify_date('2022-11-17', uk_or_us = 'UK')`"
from: markdown+emoji
format:
  revealjs: 
    transition: none
    slide-number: false
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/light-logo.png
    theme: cararquarto.scss
    footer: |
        Slides and recording: [cararthompson.com/talks/nhsr2022-palatable-palettes](https://cararthompson.com/talks/nhsr2022-palatable-palettes)
filters:
 - code-visibility
 - lightbox
lightbox: auto
auto-animate: true
title-slide-attributes:
    data-background-image: "images/dark-background.png"
    data-background-size: stretch
    data-background-opacity: "1"
    data-background-color: black
---

# Intro {visibility=hidden}

## Hi there :wave: ! {transition="convex-in none-out"}


```{r setup}
knitr::opts_chunk$set(dev = "ragg_png")

systemfonts::register_font("BrandonText", plain = "C:/Windows/Fonts/BrandonText-Regular.ttf")
systemfonts::register_variant("EnriquetaSB", family = "Enriqueta", weight = "semibold")

library(tidyverse)

dark_text <- "#1A242F"

mid_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[2]
light_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[3]

theme_nhsr_demo <- function(base_size = 12, 
                            dark_text = "#1A242F") {
  
  mid_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[2]
  light_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[3]
  
  theme_minimal(base_size = base_size) +
    theme(text = element_text(colour = mid_text, family = "BrandonText", lineheight = 1.1),
          plot.title = element_text(colour = dark_text, family = "EnriquetaSB", size = rel(1.6), margin = margin(12, 0, 8, 0)),
          plot.subtitle = element_text(size = rel(1.1), margin = margin(4, 0, 0, 0)),
          axis.text.y = element_text(colour = light_text, size = rel(0.8)),
          axis.title.y = element_text(size = 12, margin = margin(0, 4, 0, 0)),
          axis.text.x = element_text(colour = mid_text, size = 12),
          axis.title.x = element_blank(),
          legend.position = "top",
          legend.justification = 1,
          panel.grid = element_line(colour = "#F3F4F5"),
          plot.caption = element_text(size = rel(0.8), margin = margin(8, 0, 0, 0)),
          plot.margin = margin(0.25, 0.25, 0.25, 0.25,"cm"))
}

penguins <- palmerpenguins::penguins %>%
  mutate(banana_quantity = case_when(island == "Biscoe" ~ 1,
                                     island == "Dream" ~ 0.5,
                                     island == "Torgersen" ~ 0.1,
                                     TRUE ~ 1))

```


üë© Cara Thompson

::: {.fragment}
üë©‚Äçüíª Freelance data consultant specialising in dataviz and "enhanced" reproducible outputs
:::

::: {.fragment}
üíô Helping others maximise the impact of their expertise
:::

::: {.fragment}
üé® Five tips for creating and applying bespoke colour schemes to your plots
:::

# Please suspend all disbelief

---

![](images/penguin-bakeoff.png)


## The Great Penguin Bake Off

```{r}
penguin_plot <- ggplot(palmerpenguins::penguins %>%
                         mutate(species = as.factor(species)),
                       aes(x = species)) +
  geom_bar(show.legend = FALSE,
           aes(colour = species,
               fill = species),
           size = 1.5) +
  theme(axis.title.y = element_blank())

penguin_plot +
  labs(title = "The Penguins went on a bit of an adventure...")

```


## The Great Penguin Bake Off

```{r}
penguin_plot <- ggplot(palmerpenguins::penguins %>%
                         mutate(species = as.factor(species)),
                       aes(x = species)) +
  geom_bar(show.legend = FALSE,
           aes(colour = species,
               fill = species),
           size = 1.5) +
  theme_nhsr_demo() +
  theme(axis.title.y = element_blank())

penguin_plot +
  labs(title = "The Penguins went on a bit of an adventure...")

```

::: footer
Find out more: [cararthompson.com/talks/nhsr2022-ggplot-themes](cararthompson.com/talks/nhsr2022-ggplot-themes)
:::

## The Great Penguin Bake Off

```{r}
banana_colours <- c("Adelie" = "#89973d",
                    "Chinstrap" = "#e8b92f",
                    "Gentoo" = "#a45e41")

banana_plot <- penguin_plot +
  labs(title = "Each species was asked to bake with bananas of different ripeness") +
  scale_colour_manual(values = banana_colours) +
  scale_fill_manual(values = banana_colours)

banana_plot

```


## The Great Penguin Bake Off

```{r}
penguin_plot +
  labs(title = "They decided to go on a retreat to plan their bakes in different locations") +
  scale_fill_manual(values = c("Adelie" = "#b0a798",
                               "Chinstrap" = "#afba49",
                               "Gentoo" = "#d8ebfa")) +
  scale_colour_manual(values = c("Adelie" = "#515153",
                                 "Chinstrap" = "#6f7453",
                                 "Gentoo" = "#84a8cc"))

```



## The Great Penguin Bake Off

```{r}
penguin_plot +
  labs(title = "Each species was allowed to invite a different mentor...") +
  scale_fill_manual(values = c("Adelie" = "#b6c3bc",
                               "Chinstrap" = "#d45594",
                               "Gentoo" = "#f9f0e6")) +
  scale_colour_manual(values = c("Adelie" = "#8fc6c9",
                                 "Chinstrap" = "#a82f22",
                                 "Gentoo" = "#fdbeda"))

```

## The Great Penguin Bake Off

```{r}
penguin_plot +
  labs(title = "... and to choose a type of snack between practice bakes") +
  scale_fill_manual(values = c("Adelie" = "#615c59",
                               "Chinstrap" = "#e0e6eb",
                               "Gentoo" = "#d9762b")) +
  scale_colour_manual(values = c("Adelie" = "#495152",
                                 "Chinstrap" = "#0f1415",
                                 "Gentoo" = "#f5d368"))

```


## The Great Penguin Bake Off

```{r}
ggplot(filter(palmerpenguins::penguins, species == "Adelie") %>%
         mutate(banana_quantity = case_when(island == "Biscoe" ~ 1,
                                            island == "Dream" ~ 0.5,
                                            island == "Torgersen" ~ 0.1)),
       aes(x = island, 
           fill = species,
           alpha = banana_quantity)) +
  geom_bar(show.legend = FALSE,
           size = 1.5,
           colour = "#FFFFFF",
           fill = "#FFFFFF",
           alpha = 1) +
  geom_bar(show.legend = FALSE,
           size = 1.5,
           colour =  banana_colours[[1]]) +
  scale_fill_manual(values = banana_colours) +
  scale_alpha(range = c(0.2, 1)) +
  labs(title = "Finally, the Adelie penguins decided to experiment with different\nquantities of banana in their mix") +
  theme_nhsr_demo() +
  theme(axis.title.y = element_blank())

```

---

![](images/penguin-bakeoff.png)



# Use colour purposefully {visibility=hidden}

## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully

### <span style=color:#28A569>#2</span> - Let others help you

### <span style=color:#28A569>#3</span> - Apply colours using a named vector 

### <span style=color:#28A569>#4</span> - Check for accessibility

### <span style=color:#28A569>#5</span> - Make use of colour interpolation



# Use colour purposefully {visibility=hidden}

## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.imitate-title}

### <span style=color:#28A569>#2</span> - Let others help you

### <span style=color:#28A569>#3</span> - Apply colours using a named vector 

### <span style=color:#28A569>#4</span> - Check for accessibility

### <span style=color:#28A569>#5</span> - Make use of colour interpolation



## <span style=color:#28A569>#1</span> - Use colour purposefully 

::: fragment
Make it easy for the readers to remember what is what. 
:::

::: {.fragment}

> *But my graphs aren't about penguins baking banana bread!*

:::

::: {.columns}

::: {.column width=60%}

::: {.fragment}

```{r}
#| echo: false
#| results: hide
#| fig-width: 6
#| fig-height: 1.7

machine <- "#02122b"
human <-  "#fe7374" ##e27c89"# "#f47e7f" # "#e0878a"
monochromeR::generate_palette(machine, 
                              blend_colour = human, 
                              n_colours = 3, 
                              view_palette = TRUE)
```

:::

:::

::: {.column width=35%}


::: {.fragment}
![](images/machine.gif)
:::

:::
:::


## <span style=color:#28A569>#1</span> - Use colour purposefully 


```{r}
ToothGrowth %>%
  mutate(supplement = factor(case_when(supp == "VC" ~ "Vitamin C",
                                       supp == "OJ" ~ "Orange Juice"))) %>%
  ggplot() +
  geom_boxplot(aes(group = dose,
                   y = len,
                   alpha = dose, 
                   fill = supplement),
               show.legend = FALSE,
               colour = light_text) +
  facet_wrap( ~ supplement) +
  scale_fill_manual(values = list(`Orange Juice` = "#e3ad0a",
                                  `Vitamin C` = "#fd6a0d")) +
  labs(title = "The growth of the odontoblast of the incisor teeth as a\ncriterion of vitamin C intake of the guinea pig",
       subtitle = "Is that a win for Orange Juice? Looks like it to me!
       ",
       x = "Dose",
       y = "",
       caption = "Data from ToothGrowth") +
  theme_nhsr_demo() +
  theme(
    axis.text.x = element_text(colour = light_text, size = rel(0.8)),
    axis.title.x = element_text(margin = margin(8, 0, 0, 0)),
    strip.background = element_rect(fill = "#F3F4F5", color = "#FFFFFF"),
    strip.text = element_text(family = "Enriqueta", size = 14)
  )

```


## <span style=color:#28A569>#1</span> - Use colour purposefully 

Make it easy for the readers to remember what is what. 

![](images/penguin-outcomes.png)

::: footer
Find out more: [cararthompson.com/talks/nhsr2022-level-up](https://cararthompson.com/talks/nhsr2022-level-up)
:::


# Use colour purposefully {visibility=hidden}

## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.imitate-title}

### <span style=color:#28A569>#2</span> - Let others help you

### <span style=color:#28A569>#3</span> - Apply colours using a named vector 

### <span style=color:#28A569>#4</span>  - Check for accessibility

### <span style=color:#28A569>#5</span> - Make use of colour interpolation




# Let others help you {visibility=hidden}

## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.faded-small}

### <span style=color:#28A569>#2</span> - Let others help you{.imitate-title}

### <span style=color:#28A569>#3</span> - Apply colours using a named vector 

### <span style=color:#28A569>#4</span> - Check for accessibility

### <span style=color:#28A569>#5</span> - Make use of colour interpolation



## <span style=color:#28A569>#2</span> - Let others help you

::: fragment
ü§´ - I find picking colours really tricky
:::

::: fragment
Luckily, there are others who can help... 
:::

::: {.incremental}
- Your department brand guidelines
- A photo + something like [imagecolorpicker.com](https://imagecolorpicker.com/) to pick out colours
:::


## <span style=color:#28A569>#2</span> - Let others help you

![](images/photos.png)

## <span style=color:#28A569>#2</span> - Let others help you

::: {.columns}
::: {.column width=50%}
![](images/202210_gbbo.png)
:::

::: {.column width=50%}
::: {.fragment}

<br>
<br>
![](images/gbbo.jpg)
:::
:::
:::


## <span style=color:#28A569>#2</span> - Let others help you

::: {.columns}
::: {.column width=50%}

```{r}
#| results: hide
monochromeR::generate_palette(machine, 
                              blend_colour = human, 
                              n_colours = 3, 
                              view_palette = TRUE)
```

:::

::: {.column width=50%}
::: {.fragment}
![](images/ai.jpg)
:::
:::
:::



## <span style=color:#28A569>#2</span> - Let others help you

::: {.columns}
::: {.column width=50%}

![](images/penguin-outcomes.png)

:::

::: {.column width=50%}
::: {.fragment}
![](images/bananas.png)
:::
:::
:::


## <span style=color:#28A569>#2</span> - Let others help you

- <span style=color:#808A95>Your department brand guidelines
- <span style=color:#808A95>A photo + something like [imagecolorpicker.com](https://imagecolorpicker.com/) to pick out colours</span>
- Take inspiration from other dataviz / art you like


## <span style=color:#28A569>#2</span> - Let others help you

![](images/d7hftxdivxxvm.cloudfront.webp)

::: footer
[www.artsy.net/artwork/leon-morrocco-untitled-jean-resting](https://www.artsy.net/artwork/leon-morrocco-untitled-jean-resting)
:::

## <span style=color:#28A569>#2</span> - Let others help you

- <span style=color:#808A95>Your department brand guidelines
- <span style=color:#808A95>A photo + something like [imagecolorpicker.com](https://imagecolorpicker.com/) to pick out colours</span>
- <span style=color:#808A95>Take inspiration from other dataviz / art you like</span>
- Google images and "[whatever you like] palette"


## <span style=color:#28A569>#2</span> - Let others help you

![](images/birmingham.webp)


::: footer
[www.drawmycity.co.uk/product/the-birmingham-colour-palette-1](https://www.drawmycity.co.uk/product/the-birmingham-colour-palette-1)
:::



## <span style=color:#28A569>#2</span> - Let others help you

- <span style=color:#808A95>Your department brand guidelines
- <span style=color:#808A95>A photo + something like [imagecolorpicker.com](https://imagecolorpicker.com/) to pick out colours</span>
- <span style=color:#808A95>Take inspiration from other dataviz / art you like</span>
- <span style=color:#808A95>Google images and "[whatever you like] palette"</span>
- Or... start from the colour wheel and read around how best to use it
  - Using a tool like [paletton.com](https://paletton.com/) makes it easier!

::: footer
Find out more: [blog.datawrapper.de/colors-for-data-vis-style-guides/](https://blog.datawrapper.de/colors-for-data-vis-style-guides/)
:::



# Apply using a named vector {visibility=hidden}

## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.faded-small}

### <span style=color:#28A569>#2</span> - Let others help you {.imitate-title}

### <span style=color:#28A569>#3</span> - Apply colours using a named vector 

### <span style=color:#28A569>#4</span> - Check for accessibility

### <span style=color:#28A569>#5</span> - Package up as a default palette


## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.faded-small}

### <span style=color:#28A569>#2</span> - Let others help you {.faded-small}

### <span style=color:#28A569>#3</span> - Apply colours using a named vector {.imitate-title}

### <span style=color:#28A569>#4</span> - Check for accessibility

### <span style=color:#28A569>#5</span> - Package up as a default palette




## <span style=color:#28A569>#3</span> - Apply colours using a named vector {auto-animate=true}

Once you've found your colours, the quick fix...

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "9-11"
#| fig-width: 7
#| fig-height: 6
ggplot(penguins, 
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           colour = species)) +
  geom_point(size = 5) +
  labs(x = "Baking duration",
       y = "Yumminess") +
  theme_nhsr_demo() +
  scale_colour_manual(values = c("#89973d", 
                                 "#e8b92f", 
                                 "#a45e41"))

```


## <span style=color:#28A569>#3</span> - Apply colours using a named vector {auto-animate=true}

... might be a dangerous shortcut!

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "2-8,16-18"
#| fig-width: 7
#| fig-height: 6
ggplot(penguins %>% 
         # Oh, that should be a factor, 
         # let me fix that for you!
         mutate(species = 
                  factor(species, 
                         levels = c("Chinstrap", 
                                    "Gentoo", 
                                    "Adelie"))), 
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           colour = species)) +
  geom_point(size = 5) + 
  labs(x = "Baking duration",
       y = "Yumminess") +
  theme_nhsr_demo() +
  scale_colour_manual(values = c("#89973d", 
                                 "#e8b92f", 
                                 "#a45e41"))

```


## <span style=color:#28A569>#3</span> - Apply colours using a named vector

What is going on? 

::: fragment
> The values will be matched **in order** (usually alphabetical) with the limits of the scale, or with breaks if provided. 
> If this is a named vector, then the values will be matched based on the names instead. Data values that don't match will be given `na.value`.

:::

## <span style=color:#28A569>#3</span> - Apply colours using a named vector {auto-aminate=true}

Create a named vector

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-3|5,8,13"
#| fig-width: 7
#| fig-height: 6
banana_colours <- c("Adelie" = "#89973d",
                    "Chinstrap" = "#e8b92f",
                    "Gentoo" = "#a45e41")

ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           colour = species)) +
  geom_point(size = 5) +
  labs(x = "Baking duration",
       y = "Yumminess") +
  theme_nhsr_demo() +
  scale_colour_manual(values = banana_colours)

```


## <span style=color:#28A569>#3</span> - Apply colours using a named vector {auto-animate=true}

Create a named vector

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "5-12,20"
#| fig-width: 7
#| fig-height: 6
banana_colours <- c("Adelie" = "#89973d",
                    "Chinstrap" = "#e8b92f",
                    "Gentoo" = "#a45e41")

ggplot(penguins %>% 
         # Oh, that should be a factor, 
         # let me fix that for you!
         mutate(species = 
                  factor(species, 
                         levels = c("Chinstrap", 
                                    "Gentoo", 
                                    "Adelie"))), 
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           colour = species)) +
  geom_point(size = 5) +
  labs(x = "Baking duration",
       y = "Yumminess") +
  theme_nhsr_demo() +
  scale_colour_manual(values = banana_colours)

```



## <span style=color:#28A569>#3</span> - Apply colours using a named vector

Key advantages

::: incremental
- Know the colours are applied to the right data points!
- Keep colour-data pairings consistent throughout the project 
- Package up a default palette
- Reuse colours in the text
  - `ggtext::element_markdown()`- Level up your plots
:::

::: footer
Find out more: [cararthompson.com/talks/nhsr2022-level-up](https://cararthompson.com/talks/nhsr2022-level-up)
:::

## <span style=color:#28A569>#3</span> - Apply colours using a named vector


## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.faded-small}

### <span style=color:#28A569>#2</span> - Let others help you {.faded-small}

### <span style=color:#28A569>#3</span> - Apply colours using a named vector {.imitate-title}

### <span style=color:#28A569>#4</span> - Check for accessibility

### <span style=color:#28A569>#5</span> - Package up as a default palette



## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.faded-small}

### <span style=color:#28A569>#2</span> - Let others help you {.faded-small}

### <span style=color:#28A569>#3</span> - Apply colours using a named vector {.faded-small}

### <span style=color:#28A569>#4</span> - Check for accessibility {.imitate-title}

### <span style=color:#28A569>#5</span> - Package up as a default palette



## <span style=color:#28A569>#4</span> - Check for accessibility

üì¶ `{colorblindr}` - Claire D. McWhite and Claus O. Wilke

::: fragment

> a package to apply simulations of color vision deficiencies to existing ggplot2 figures. It can simulate various classes and severities of color blindness, as well as desaturate plots.

:::

::: footer
Find out more: [https://github.com/clauswilke/colorblindr](github.com/clauswilke/colorblindr)
:::



## <span style=color:#28A569>#4</span> - Check for accessibility

```{r}
#| echo: true
banana_plot

```



## <span style=color:#28A569>#4</span> - Check for accessibility

```{r}
#| echo: true
colorblindr::cvd_grid()

```


##  <span style=color:#28A569>#4</span> - Check for accessibility

Easiest way to do this? Build a palette that goes from a lighter colour to a darker colour. 

<br>

::: fragment
A few helpful resources:
:::

::: incremental
- Find colours - [mycolor.space](https://mycolor.space)
- Test palette - [Chroma.js Color Palette Helper](https://www.vis4.net/palettes/#/9|s|00429d,96ffea,ffffe0|ffffe0,ff005e,93003a|1|1])
- Test text contrast - [webaim.org/resources/contrastchecker](https://webaim.org/resources/contrastchecker/)
:::


## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.faded-small}

### <span style=color:#28A569>#2</span> - Let others help you {.faded-small}

### <span style=color:#28A569>#3</span> - Apply colours using a named vector {.faded-small}

### <span style=color:#28A569>#4</span> - Check for accessibility {.imitate-title}

### <span style=color:#28A569>#5</span> - Make use of colour interpolation




## {auto-animate=true background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully {.faded-small}

### <span style=color:#28A569>#2</span> - Let others help you {.faded-small}

### <span style=color:#28A569>#3</span> - Apply colours using a named vector {.faded-small}

### <span style=color:#28A569>#4</span> - Check for accessibility {.faded-small}

### <span style=color:#28A569>#5</span> - Make use of colour interpolation {.imitate-title}


##  <span style=color:#28A569>#5</span> - Make use of colour interpolation

::: fragment
> What if I don't know how many colours I need?

:::

::: incremental
- Build more than you're likely to need and allow `R` to pick colours to maximise distance
  - ‚ö†Ô∏è It just picks e.g. #1, #5 and #9 in the order of your vector
- **Pick 2 or 3 anchor colours and let `R` interpolate**
  - `colorRampPalette()`
:::


##  <span style=color:#28A569>#5</span> - Make use of colour interpolation

```{r}
#| echo: true
#| output-location: column
#| results: hide
#| fig-width: 7.1
#| fig-height: 6.5
#| code-line-numbers: "1|12-14"
my_anchor_colours <- c("green", "blue", "purple")

palmerpenguins::penguins %>%
  mutate(island_fm = paste0(island, sex)) %>%
  ggplot() + 
  geom_point(aes(x = bill_length_mm,
                 y = bill_depth_mm,
                 colour = island_fm,
                 size = body_mass_g),
             show.legend = FALSE) +
  theme_nhsr_demo() +
  scale_color_manual(
    values = colorRampPalette(
      my_anchor_colours)(9))

```


##  <span style=color:#28A569>#5</span> - Make use of colour interpolation

[imagecolorpicker.com](https://imagecolorpicker.com/) + [Chroma.js Color Palette Helper](https://www.vis4.net/palettes)

![](images/d7hftxdivxxvm.cloudfront.webp){width=80%}

##  <span style=color:#28A569>#5</span> - Make use of colour interpolation

```{r}
#| echo: true
#| output-location: column
#| results: hide
#| fig-width: 7.1
#| fig-height: 6.5
#| code-line-numbers: "1|11-13"
my_anchor_colours <- c("#4f3c78", "#d3970a", "#c0979c")

palmerpenguins::penguins %>%
  ggplot() + 
  geom_point(aes(x = bill_length_mm,
                 y = bill_depth_mm,
                 colour = island,
                 size = body_mass_g),
             show.legend = FALSE) +
  theme_nhsr_demo() +
  scale_color_manual(
    values = colorRampPalette(
      my_anchor_colours)(3))

```



##  <span style=color:#28A569>#5</span> - Make use of colour interpolation

```{r}
#| echo: true
#| output-location: column
#| results: hide
#| fig-width: 7.1
#| fig-height: 6.5
#| code-line-numbers: "12-14"
my_anchor_colours <- c("#4f3c78", "#d3970a", "#c0979c")

palmerpenguins::penguins %>%
  mutate(island_fm = paste0(island, sex)) %>%
  ggplot() + 
  geom_point(aes(x = bill_length_mm,
                 y = bill_depth_mm,
                 colour = island_fm,
                 size = body_mass_g),
             show.legend = FALSE) +
  theme_nhsr_demo() +
  scale_color_manual(
    values = colorRampPalette(
      my_anchor_colours)(9))

```



##  <span style=color:#28A569>#5</span> - Make use of colour interpolation

```{r}
#| echo: true
#| output-location: column
#| results: hide
#| fig-width: 7.1
#| fig-height: 6.5
#| code-line-numbers: "1"
my_anchor_colours <- c("#375248", "#d3970a", "#7691b1")

palmerpenguins::penguins %>%
  mutate(island_fm = paste0(island, sex)) %>%
  ggplot() + 
  geom_point(aes(x = bill_length_mm,
                 y = bill_depth_mm,
                 colour = island_fm,
                 size = body_mass_g),
             show.legend = FALSE) +
  theme_nhsr_demo() +
  scale_color_manual(
    values = colorRampPalette(
      my_anchor_colours)(9))

```


##  <span style=color:#28A569>#5</span> - Make use of colour interpolation

There are only so many colours you can use in a plot!

::: {.columns}

::: {.column width=50%}

::: {.fragment}
- Could other approaches work (facets?)
:::
::: {.fragment}
- Try using different shapes (you can use letters / emoji!)
:::
:::

::: {.column width=50%}
::: fragment
![](images/202007c_pets.gif)
:::
:::
:::

::: footer
[[github.com/cararthompson/tidytuesdays](https://github.com/cararthompson/tidytuesdays#2020-07---animals-and-pets)
:::



## There's so much more we could talk about!

::: fragment
- Packaging up your palette for easy reuse `carartemplates::carar_colours()`

```{r}
#| fig-height: 0.5
carartemplates::carar_colours() %>%
  monochromeR::view_palette()

```
:::

::: fragment
- Creating your own `scale_nhsdemo_colour/fill()` functions
- You can even have several palettes! `scale_nhsdemo_colour("Birmingham")`?
:::

::: fragment
- Basing your "dark text" colour on the central / most important colour in your palette
:::

::: fragment
<center>
**... but we can talk about this some other time!**
</center>
:::


## Five tips for creating and applying bespoke colour palettes {background=#2C3D4F}

### <span style=color:#28A569>#1</span> - Use colour purposefully

### <span style=color:#28A569>#2</span> - Let others help you

### <span style=color:#28A569>#3</span> - Apply colours using a named vector

### <span style=color:#28A569>#4</span> - Check for accessibility

### <span style=color:#28A569>#5</span> - Make use of colour interpolation

<br>

::: fragment
<center>
### <span style=color:#28A569>Happy plotting!</span>
### @cararthompson
</center>
:::